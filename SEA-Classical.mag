// SEA Algorithm - Classical Modular Polynomials
clear;

FindOrderFrobenius := function(poly, ell, _x, p)
	f := _x; s := 0;
	for i := 1 to ell+1 do
		if IsDivisibleBy(ell+1, i) and (-1)^((ell+1) div i) eq LegendreSymbol(p, ell) then
			for k := 1 to i-s do
				f := Modexp(f,p,poly);
			end for;
			if GCD(f-_x, poly) eq poly then
				return i;
			else
				s := i;				
			end if;
		end if;
	end for;
	return -1;
end function;

getNonSquare := function(ell)
	d := 0;	
	for i := 1 to ell-1 do
		if LegendreSymbol(i, ell) eq -1 then
			return i;
		end if;
	end for;
	return d;
end function;

constructR := function(At, size, m1, m2, m3, t3)
	R := []; T1 := []; T2 := []; T1[1] := 1; T2[1] := 0; 
	sn := 1; dn := 1; tmp := 1; fl := true;
	
	for i := 1 to #At-1 by 2 do
		dn := 1; 
		
		if fl eq true then
			ss := T1; dd := T2;
		else
			ss := T2; dd := T1;
		end if;
		
		for j := 1 to #At[i] do
			for k := 1 to sn do
				crt1 := []; crt2 := [];
				crt1[1] := ss[k]; 
				crt1[2] := At[i][j];
				crt2[1] := tmp; 
				crt2[2] := At[i+1][1];  
				dd[dn] := CRT(crt1,crt2); dn +:= 1;
			end for;
		end for;
		sn := dn-1;
		
		if fl eq true then
			T1 := ss; T2 := dd;
		else
			T1 := dd; T2 := ss;			
		end if;
		
		fl := not fl;
		tmp *:= At[i+1][1];
	end for;

	if fl eq true then
		ss := T1;
	else
		ss := T2;
	end if;
	
	for i := 1 to size do
		R[i] := ((ss[i]-t3)*Modinv(m2*m3, m1)) mod m1;	
		if R[i] lt 0 then
			R[i] +:= m1;
		end if;
		R[i+size] := R[i]-m1;			
	end for;
	
	return Sort(R);
end function;

MatchSort := function(Ap, Ep, p, a4, a6)
	S1 := []; S2 := []; sizeS1 := 1; sizeS2 := 1;
	m1 := 1; m2 := 1; 
	for i := 1 to #Ap-1 by 2 do
        if sizeS1 le sizeS2 then
            m1 *:= Ap[i+1][1];
            Append(~S1,Ap[i]);
			Append(~S1,Ap[i+1]);
            sizeS1 *:= #Ap[i];            
        else
            m2 *:= Ap[i+1][1];        
            Append(~S2,Ap[i]);
			Append(~S2,Ap[i+1]);
            sizeS2 *:= #Ap[i];
		end if;
	end for;	

	Ep1 := []; 	Ep2 := []; 
	m3 := 1;
	for i := 1 to #Ep do
		Ep1[i] := Ep[i][1];		
		Ep2[i] := Ep[i][2];
		m3 *:= Ep[i][2];
	end for;
	
	if m1*m2*m3 le 4*Sqrt(p) then
		return 0, false;
	end if;
	
	t3 := CRT(Ep1, Ep2);
	
	R1 := constructR(S1, sizeS1, m1, m2, m3, t3);
	R2 := constructR(S2, sizeS2, m2, m1, m3, t3);

	E := EllipticCurve([0,0,0,a4,a6]);
	for i := 1 to 5 do
		Pt := Random(E);
		Qt := (p+1-t3)*Pt;
		if Qt eq E!0 then
			return t3, true;
		end if;

		m1m3Pt := m1*m3*Pt;		
		m2m3Pt := m2*m3*Pt;		
		
		tA := []; tB := []; tC := []; idx := []; 
		for j := 1 to #R1 do
			tA[j] := Qt-R1[j]*m2m3Pt; 
			tB[j] := tA[j][1];
			tC[j] := R1[j];
			idx[j] := j;
		end for;		
		
		ParallelSort(~tB, ~idx);

		Qr1 := []; r1 := [];		
		for j := 1 to #tA do
			Qr1[j] := tA[idx[j]];
			r1[j] := tC[idx[j]];
		end for;
		
		for j := 1 to #R2 do
			tP := R2[j]*m1m3Pt;
			if tP in Qr1 then
				k := Index(Qr1,tP);
				if k ne -1 then 
					t := t3+m3*(m1*R2[j]+m2*r1[k]);
					break;
				end if;	
			end if;
		end for;
	end for;
	return t, true;
end function;

AddAffinePointsGeneric := function(x1, y1, i1, x2, y2, i2, a4)
	if i1 then
		return x2, y2, i2;
	elif i2 then
		return x1, y1, i1;
	elif x1 eq x2 then
		if y1 eq 0 then
			return 0*x1, 0*y1, true; 
		elif y1 ne y2 then
			return 0*x1, 0*y1, true;
		else
			L := (3*x1^2+a4)/(2*y1);
			x3 := L^2-2*x1;
			y3 := L*(x1-x3)-y1;
			return x3, y3, false;
		end if;
	else
		L := (y2-y1)/(x2-x1);
		x3 := L^2-x1-x2;
		y3 := L*(x1-x3)-y1;
		return x3, y3, false;
	end if;
end function;

SEA := function(p, a4, a6, x, y, _x)
	M := 1; ell := 2; Ap := []; Ep := []; ai := 1; ei := 1; atkins := 1; ClassicalMax := 47;
	j := 1728*4*a4^3/(4*a4^3+27*a6^2); P := Parent(x);
	
	if GCD(Modexp(_x, p, _x^3+a4*_x+a6)-_x, _x^3+a4*_x+a6) eq 1 then // for mod 2
		Ep[ei] := [1,2];
	else
		Ep[ei] := [0,2];
	end if;
	ei +:= 1;
	
	while M le 4*Sqrt(p) and ell le ClassicalMax do // ClassicalModularPolynomial(47) is the maximum in the database
		ell := NextPrime(ell);
		M *:= ell;
		poly := UnivariatePolynomial(Evaluate(P!ClassicalModularPolynomial(ell),[x,j]));
		if Degree(GCD(poly,Modexp(_x, p, poly)-_x)) eq 0 then // determine if Atkin or Elkies
			if atkins gt Log(2,p) then // avoid gathering too much Atkin info
				M := M/ell;
			else
				ell,": Atkin";
				r := FindOrderFrobenius(poly, ell, _x, p);
				
				d := getNonSquare(ell);

				FF := GF(ell);
				FFF<i> := ExtensionField<FF, x|x^2-d>; 
				g := RootOfUnity(r, FFF);

				S := []; kk := 1;
				for i := 1 to r-1 do
					if GCD(i,r) eq 1 then
						S[kk] := g^i; kk +:= 1;
					end if;
				end for;

				Atl := []; tct := 1;
				if #S eq 1 then
					Snum := 1;
				else
					Snum := #S div 2;
				end if;
				for i := 1 to Snum do
					g1 := ElementToSequence(S[i])[1];
					z := (FF!p*(g1+1)/2);
					if LegendreSymbol(Integers()!z, ell) ne -1 then
						sz := Sqrt(z);
						Atl[tct] := Integers()!( 2*sz); tct +:= 1;
						Atl[tct] := Integers()!(-2*sz); tct +:= 1;
					end if;
				end for;	
				Atl := Sort(Atl);
				atkins *:= #Atl;	
				Ap[ai] := Atl; ai +:= 1;
				Ap[ai] := [Integers()!ell]; ai +:= 1;	
			end if;
		else
			ell,": Elkies";
			jt := Roots(poly)[1][1];
			
			PHI_ell := P!ClassicalModularPolynomial(ell);
			assert Evaluate(PHI_ell,[j,jt]) eq 0;	

			dxPHI_ell := Derivative(PHI_ell,x);	
			dyPHI_ell := Derivative(PHI_ell,y);	

			eval_dxPHI_ell := Evaluate(dxPHI_ell,[j,jt]);	
			eval_dyPHI_ell := Evaluate(dyPHI_ell,[j,jt]);		
			
			dxdxPHI_ell := Derivative(dxPHI_ell,x);
			eval_dxdxPHI_ell := Evaluate(dxdxPHI_ell,[j,jt]);	
			
			dydyPHI_ell := Derivative(dyPHI_ell,y);
			eval_dydyPHI_ell := Evaluate(dydyPHI_ell,[j,jt]);	
			
			dxdyPHI_ell := Derivative(dyPHI_ell,x);
			eval_dxdyPHI_ell := Evaluate(dxdyPHI_ell,[j,jt]);
				
			E4 := -48*a4;
			E6 := 864*a6;		
			jd := -j*E6/E4;
					
			jtd := -jd*eval_dxPHI_ell/(ell*eval_dyPHI_ell);	
			
			a4t := -jtd^2/(48*jt*(jt-1728));
			a6t := -jtd^3/(864*jt^2*(jt-1728));
			
			E4t := -48*a4t;
			E6t := 864*a6t;					
			
			assert jtd eq -jt*E6t/E4t;
			assert jtd eq (-18*a6*eval_dxPHI_ell*j)/(ell*a4*eval_dyPHI_ell);
			
			assert jd*eval_dxPHI_ell eq -ell*jtd*eval_dyPHI_ell;

			J := -(jd^2*eval_dxdxPHI_ell + 2*ell*jd*jtd*eval_dxdyPHI_ell + ell^2*jtd^2*eval_dydyPHI_ell)/(jd*eval_dxPHI_ell);
			p1 := (ell/2)*J + (ell/4)*(E4^2/E6-ell*E4t^2/E6t) + (ell/3)*(E6/E4-ell*E6t/E4t);

			a4h := ell^4*a4t;
			a6h := ell^6*a6t;						
			assert IsIsomorphic(EllipticCurve([0,0,0,a4t,a6t]),EllipticCurve([0,0,0,a4h,a6h])) eq true;
			
			d := (ell-1) div 2;
			
			c := []; 
			c[1] := -a4/5; c[2] := -a6/7;
			for k := 3 to d do 
				sum := 0;
				for j := 1 to k-2 do
					sum +:= c[j]*c[k-1-j]; 
				end for;
				c[k] := (3/((k-2)*(2*k+3)))*sum;
			end for;
			
			ch := []; 
			ch[1] := -a4h/5; ch[2] := -a6h/7;
			for k := 3 to d do 
				sum := 0;
				for j := 1 to k-2 do
					sum +:= ch[j]*ch[k-1-j]; 
				end for;
				ch[k] := (3/((k-2)*(2*k+3)))*sum;
			end for;			
			
			L<w> := LaurentSeriesRing(Parent(a4));
		
			sum := 0;
			for k := 1 to d do
				sum +:= ((ch[k]-ell*c[k])/((2*k+1)*(2*k+2)))*w^(k+1);
			end for;
			Aw := Exp((-p1/2)*w-sum);
			
			Cw := 0;
			for k := 1 to d do
				Cw +:= c[k]*w^k;
			end for;
			
			Fl := []; Fl[d+1] := 1; 
			for i := 1 to d do
				sum2 := 0;
				for k := 1 to i do
					sum1 := 0;
					for j := 0 to k do
						num := d-i+k;
						den := k-j;
						comb := Factorial(num)/(Factorial(den)*Factorial(num-den));
						if k-j eq 0 then
							if j eq 0 then
								sum1 +:= comb;		
							end if;
						else
							sum1 +:= comb*Coefficient(Cw^(k-j), j); 
						end if;
					end for;
					sum2 +:= sum1*Fl[d-i+k+1];
				end for;
				Fl[d-i+1] := Coefficients(Aw)[i+1]-sum2;
			end for;
			
			kpol := 0;
			for i := #Fl to 1 by -1 do
				kpol +:= Fl[i]*x^(i-1);
			end for;
			
			Q := quo<P | y^2-x^3-a4*x-a6, kpol>;
			Qx := Q!x; Qy := Q!y; xk := 0*Qx; yk := 0*Qy;
			Qxp := Q!x^p; Qyp := Q!y^p; xki := true;
			for k := 1 to d do
				xk, yk, xki := AddAffinePointsGeneric(xk, yk, xki, Qx, Qy, false, a4);
				if xk eq Qxp then
					if yk eq Qyp then
						lmd := k;						
					else 
						lmd := -k;					
					end if; 
					FF := GF(ell);
				 	t := FF!lmd + FF!p/FF!lmd;
					Ep[ei] := [Integers()!t,Integers()!ell]; ei +:= 1;			
				end if;	
			end for;
		end if;
	end while;
	
	t, fl := MatchSort(Ap, Ep, p, a4, a6);

	if fl eq false then
		return 0, false;
	end if;
	
	return p+1-t, true;
end function;

/* ----------------------- MAIN ----------------------- */

for i := 1 to 1000 do
	i;
	p := NextPrime(Random([2^45 .. 2^50]));
	
	F<ii> := GF(p);
	P<x,y> := PolynomialRing(F,2);
	R<_x> := PolynomialRing(F);

	repeat
		repeat
			a4 := Random(F); a6 := Random(F);
		until IsEllipticCurve([0,0,0,a4,a6]);
		
		E := EllipticCurve([0,0,0,a4,a6]);
	until jInvariant(E) ne 0 or jInvariant(E) ne 1728;

	time res1, fl := SEA(p, a4, a6, x, y, _x);
	time res2 := #E;

	if fl ne false then // if fl eq false, then traces from ell > ClassicalMax are needed for CRT -> discard the curve
		res1;
		res2;
		assert res1 eq res2;
		"\n";
	end if;
end for;

